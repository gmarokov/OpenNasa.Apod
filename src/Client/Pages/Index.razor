@page "/"
@using OpenNasa.Apod.Shared
@using System
@inject HttpClient Http
@inject IJSRuntime JS
@using BlazorDateRangePicker

@if (pictures == null || isLoading)
{
    <div class="text-center loader">
        <div class="spinner-border" role="status">
            <span class="visually-hidden"></span>
        </div>
        <br />
        <span>Loading awesome APOD...</span>
    </div>
}
else
{
    <div class="grid">
        <div id="menu" class="stamp">
            <div id="intro" class="text-center">
                <a href="/">
                    <img alt="Nasa Logo" width="200" src="/nasa-logo.png" />
                    <h1>Astronomy picture of the day</h1>
                    <small class="text-muted">Powered by NASA Open API</small>
                </a>
            </div>
            <div class="container">
                <div class="row">
                    <div class="col">
                        <div class="form-floating">
                            <DateRangePicker class="form-control" id="floatingDateRange"
                                             MinDate="@DateTimeOffset.ParseExact(ApodConstants.FirstDateApodPost, "yyyy-MM-dd", null)"
                                             MaxDate="DateTimeOffset.Now"
                                             @bind-StartDate="StartDate"
                                             @bind-EndDate="EndDate"
                                             OnRangeSelect="OnRangeSelect" />
                            <label for="floatingDateRange">Date range for images</label>
                        </div>
                    </div>
                    <div class="col">
                        <div class="form-floating">
                            <select @onchange="ChangeRandomImageNumber"
                                    class="form-select"
                                    id="floatingRandomImages"
                                    aria-label="Number of random images">
                                <option value="">Select for random images</option>
                                @foreach (var number in randomNumbers)
                                {
                                    <option selected="@(number == SelectedString)" value=@number>@number</option>
                                }
                            </select>
                            <label for="floatingRandomImages">Number of random images</label>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="grid-sizer"></div>
        @foreach (var pic in pictures)
        {
            <div class="grid-item">
                @if (pic.MediaType == "video")
                {
                    <iframe alt="@pic.Title" src="@pic.Url"></iframe>
                }
                else
                {
                    <img alt="@pic.Title" src="@pic.Url" />
                }
                <div class="container">
                    <h3>@pic.Title</h3>
                    @@@pic.Date.ToShortDateString()
                    @if (!string.IsNullOrEmpty(pic.Copyright))
                    {
                        <text> by </text> @pic.Copyright
                    }
                    <p>
                        @pic.Explanation
                        @if (!string.IsNullOrEmpty(pic.HdUrl))
                        {
                            <br />
                            <a target="_blank" href="@pic.HdUrl">HD URL</a>
                        }
                    </p>
                </div>
            </div>
        }
    </div>
}

<div class="footer container text-center">
    <div>
        Powered by <a href="https://github.com/nasa/apod-api">NASA Open API</a>,
        <a href="https://azure.microsoft.com/en-us/">Azure</a> and
        <a href="https://github.com">GitHub</a>
    </div>
</div>

@code {
    static List<string> randomNumbers = new List<string>() { "10", "25", "50", "100" };
    ApodPicture[] pictures;
    string SelectedString;
    bool isLoading = false;
    DateTimeOffset? StartDate { get; set; } = DateTime.Today.AddDays(-9);
    DateTimeOffset? EndDate { get; set; } = DateTime.Today;

    protected override async Task OnInitializedAsync()
    {
        await GetImages(StartDate.Value.Date.ToShortDateString(), EndDate.Value.Date.ToShortDateString());
    }

    async Task OnRangeSelect(DateRange range)
    {
        isLoading = true;
        await GetImages(StartDate.Value.Date.ToShortDateString(), EndDate.Value.Date.ToShortDateString());
        isLoading = false;
    }

    async Task ChangeRandomImageNumber(ChangeEventArgs e)
    {
        isLoading = true;
        SelectedString = e.Value.ToString();
        await GetImages(int.Parse(SelectedString));
        isLoading = false;
    }

    async Task GetImages(string startDate, string endDate) =>
        await GetImagesInternal($"startDate={startDate}&endDate={endDate}");

    async Task GetImages(int count) =>
        await GetImagesInternal($"count={count}");

    async Task GetImagesInternal(string queryString)
    {
        pictures = await Http.GetFromJsonAsync<ApodPicture[]>($"api/pictures?{queryString}");
        if (pictures != null)
        {
            await JS.InvokeVoidAsync("displayGallery");
        }
    }
}
